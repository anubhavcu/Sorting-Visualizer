{"version":3,"sources":["components/NavBar.jsx","components/SortingVisualizer.jsx","sortingAlgorithms/mergeSort.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","Fragment","className","href","role","aria-label","type","title","onClick","props","speedAndBars","genReverseArray","genRandomArray","mergeSort","bubbleSort","quickSort","heapSort","insertionSort","Component","SortingVisualizer","this","array","map","value","index","key","style","height","backgroundColor","getMergeSortAnimations","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","bubbleSortAnimations","console","log","isSorted","counter","swap","temp","quickSortAnimations","quickSortHelper","startIndex","endIndex","pivot","leftIndex","rightIndex","heapSortAnimations","siftDown","buildMaxHeap","currentIndex","heap","childOneIndex","childTwoIndex","indexToSwap","insertionSortAnimations","ANIMATION_SPEED_MS","App","state","x","componentDidMount","resetColor","arrayBars","document","getElementsByClassName","randomIntFromInterval","min","max","random","updateBarsState","width","a","async","Promise","res","rej","newArrayBars","something","numberOfArrayBars","number","speedLog","querySelector","setState","sort","b","buttons","disabled","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","arrayBars1","barOneIndex","barTwoIndex","indexOne","indexTwo","barOneHeight","barTwoHeight","arrayBarsNew","barOne","barTwo","INITIAL_COLOR","target","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86240bd5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import PropTypes from \"prop-types\";\n\nclass NavBar extends Component {\n  // componentDidMount() {\n  //   this.props.genRandomArray();\n  // }\n  render() {\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-dark bg-dark mb-3\">\n          {/* <nav className=\"navbar navbar-light bg-light mb-3\"> */}\n          {/* icon not working */}\n          {/* <a href=\"https://google.com\" target=\"blank\">\n            <img src=\"../../public/logo192.png\" width=\"30\" height=\"30\" alt=\"\" />\n          </a> */}\n          <div>\n            <a href=\".\">\n              <h1 className=\"text-white\">Sorting Visualizer </h1>\n            </a>\n          </div>\n\n          <div\n            className=\"btn-toolbar\"\n            role=\"toolbar\"\n            aria-label=\"Toolbar with button groups\"\n          >\n            <div\n              className=\"btn-group mr-2\"\n              role=\"group\"\n              aria-label=\"First group\"\n            >\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                // disabled\n                title=\"Increase speed and decrease number of array-bars or vice-versa\"\n              >\n                Speed\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary xByFour\"\n                title=\"Decrease in speed and decrease in number of array bars\"\n                onClick={() => this.props.speedAndBars(-2)}\n              >\n                x/4\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary xByTwo\"\n                title=\"Decrease in speed by half and decrease in number of bars\"\n                onClick={() => this.props.speedAndBars(-1)}\n              >\n                x/2\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary x\"\n                title=\"Default speed and number of array bars\"\n                onClick={() => this.props.speedAndBars(1)}\n              >\n                x\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary xMultiplyTwo\"\n                title=\"Increase speed 2x and increase in number of array-bars \"\n                onClick={() => this.props.speedAndBars(2)}\n              >\n                2x\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary xMultiplyFour\"\n                title=\"Increase speed 4x and increase in number of array bars\"\n                onClick={() => {\n                  this.props.speedAndBars(3);\n                }}\n              >\n                4x\n              </button>\n            </div>\n          </div>\n          <div>\n            <button\n              className=\"btn btn-outline-danger m-1\"\n              // className=\"btn btn-primary btn-sm m-2\"\n              title=\"Generate a new random array\"\n              onClick={() => {\n                // disabled = true;\n                this.props.genReverseArray(178);\n              }}\n              // disabled={true}\n            >\n              Reverse Array!\n            </button>\n            <button\n              className=\"btn btn-outline-danger m-1\"\n              // className=\"btn btn-primary btn-sm m-2\"\n              title=\"Generate a new random array\"\n              onClick={() => {\n                // disabled = true;\n                this.props.genRandomArray(178, 1, false);\n              }}\n              // disabled={true}\n            >\n              Generate Random Array\n            </button>\n            <button\n              className=\"btn btn-outline-primary m-1\"\n              title=\"Time- O(nlog(n)) & Space-O(n)\"\n              // className=\"btn btn-primary btn-sm m-2\"\n              onClick={() => this.props.mergeSort()}\n            >\n              Merge Sort\n            </button>\n            <button\n              className=\"btn btn-outline-primary m-1\"\n              title=\"Time(worst)-O(n^2)||Time(best)-O(n)||Space-O(1)\"\n              // className=\"btn btn-primary btn-sm m-2\"\n              onClick={() => this.props.bubbleSort()}\n            >\n              Bubble Sort\n            </button>\n            <button\n              className=\"btn btn-outline-primary m-1\"\n              // className=\"btn btn-primary btn-sm m-2\"\n              title=\"Time(worst)-O(n^2)||Time(best)-O(nlog(n))||Space-O(log(n))\"\n              onClick={() => this.props.quickSort()}\n            >\n              Quick Sort\n            </button>\n            <button\n              className=\"btn btn-outline-primary m-1\"\n              // className=\"btn btn-primary btn-sm m-2\"\n              title=\"Time-O(nlog(n))||Space-O(1)\"\n              onClick={() => this.props.heapSort()}\n            >\n              Heap Sort\n            </button>\n            <button\n              // disabled=\"true\"\n              className=\"btn btn-outline-primary m-1\"\n              // className=\"btn btn-primary btn-sm m-2\"\n              title=\"Time(worst)-O(n^2)||Time(best)-O(n)||Space-O(1)\"\n              // onClick={() => this.props.genRandomArray(178, 1, false)}\n              onClick={() => this.props.insertionSort()}\n            >\n              Insertion Sort\n            </button>\n          </div>\n        </nav>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nimport \"./SortingVisualizer.css\";\n\nexport class SortingVisualizer extends Component {\n  // componentDidMount() {\n  //   // this.props.speedAndBars();\n  // }\n  render() {\n    // const { array } = this.state;\n\n    return (\n      // <div>\n      <div className=\"array-container\">\n        {this.props.array.map((value, index) => (\n          <div\n            className=\"array-bar\"\n            key={index}\n            style={{\n              height: `${value}px`,\n              // width: this.props.width,\n              // backgroundColor: INITIAL_COLOR\n              backgroundColor: \"turquoise\"\n            }}\n          ></div>\n        ))}\n        {/* </div> */}\n      </div>\n    );\n  }\n}\n\nexport default SortingVisualizer;\n\n//forEach doesn't return anything (it returns undefined) whereas map function returns a new array (since jsx returns a React.CreateElement- we were not getting anything with using foreach funtion, console logging elements with foreach will work but since it returns undefined , jsx won't return anything)\n\n//slightly broken\n// bubbleSort() {\n//   const animations = bubbleSortAnimations(this.state.array);\n//   console.log(animations);\n//   for (let i = 0; i < animations.length; i++) {\n//     const arrayBars = document.getElementsByClassName(\"array-bar\");\n//     const isColorChange = i % 2 === 0;\n//     if (animations[i] !== -1) {\n//       if (isColorChange) {\n//         // console.log(i);\n//         const [barOneIdx, barTwoIdx] = animations[i];\n//         const barOneStyle = arrayBars[barOneIdx].style;\n//         const barTwoStyle = arrayBars[barTwoIdx].style;\n//         const color = i % 2 === 0 ? PRIMARY_COLOR : SECONDARY_COLOR;\n//         setTimeout(() => {\n//           barOneStyle.backgroundColor = color;\n//           barTwoStyle.backgroundColor = color;\n//         }, i * ANIMATION_SPEED_MS);\n//         setTimeout(() => {\n//           barOneStyle.backgroundColor = INITIAL_COLOR;\n//           // barTwoStyle.backgroundColor = INITIAL_COLOR;\n//         }, i * ANIMATION_SPEED_MS + 10);\n//       } else {\n//         // console.log(i);\n//         setTimeout(() => {\n//           const [barOneIdx, barTwoIdx, heightOne, heightTwo] = animations[i];\n//           const barOneStyle = arrayBars[barOneIdx].style;\n//           const barTwoStyle = arrayBars[barTwoIdx].style;\n//           barOneStyle.height = `${heightTwo}px`;\n//           barTwoStyle.height = `${heightOne}px`;\n//         }, i * ANIMATION_SPEED_MS);\n//       }\n//     }\n//     //  else {\n//     //   const length = arrayBars.length;\n//     //   arrayBars[length - 1].style.backgroundColor = FINAL_COLOR;\n//     // }\n//   }\n// }\n","export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  //bottom two loops for leftover values\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","export function bubbleSortAnimations(array) {\n  console.log(array);\n  let isSorted = false;\n  let animations = [];\n  let counter = 0;\n  while (!isSorted) {\n    isSorted = true;\n    for (let i = 0; i < array.length - 1 - counter; i++) {\n      // animations.push([i, i + 1]);\n      animations.push([i, i + 1]);\n\n      if (array[i] > array[i + 1]) {\n        // animations.push([i, i + 1]);\n        // animations.push([i,i+1]);\n        animations.push(-1);\n        animations.push([i, i + 1, array[i], array[i + 1]]);\n        swap(i, i + 1, array);\n        isSorted = false;\n      }\n    }\n    // animations.push(-1);\n    counter += 1;\n  }\n  return animations;\n  // return array;\n}\nfunction swap(i, j, array) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n","export function quickSortAnimations(array) {\n  const animations = [];\n  quickSortHelper(array, 0, array.length - 1, animations);\n  // return array;\n  return animations;\n}\n//-1 pivot\n//-2 swap\n//-3 traversing the arrays with left and right indices\nfunction quickSortHelper(array, startIndex, endIndex, animations) {\n  if (startIndex >= endIndex) return;\n  // animations.push(-1);\n  animations.push(-2);\n  const pivot = startIndex;\n  let leftIndex = startIndex + 1;\n  let rightIndex = endIndex;\n  //zero value in last to show that we are changing pivot\n  animations.push([pivot, leftIndex, rightIndex, 0]);\n  while (rightIndex >= leftIndex) {\n    // animations.push(-3);\n    //optional pushes to delay the animation effect\n    // animations.push([leftIndex, rightIndex]);\n    animations.push([leftIndex, rightIndex]);\n    animations.push([leftIndex, rightIndex]);\n    if (array[leftIndex] > array[pivot] && array[rightIndex] < array[pivot]) {\n      animations.push(-2);\n      animations.push([\n        leftIndex,\n        rightIndex,\n        array[leftIndex],\n        array[rightIndex]\n      ]);\n      swap(leftIndex, rightIndex, array);\n    }\n    if (array[leftIndex] <= array[pivot]) leftIndex++;\n    if (array[rightIndex] >= array[pivot]) rightIndex--;\n  }\n  animations.push(-2);\n  animations.push([pivot, rightIndex, array[pivot], array[rightIndex]]);\n  swap(pivot, rightIndex, array);\n  const leftSubArrayIsSmaller =\n    rightIndex - 1 - startIndex < endIndex - (rightIndex + 1);\n  if (leftSubArrayIsSmaller) {\n    quickSortHelper(array, startIndex, rightIndex - 1, animations);\n    quickSortHelper(array, rightIndex + 1, endIndex, animations);\n  } else {\n    quickSortHelper(array, rightIndex + 1, endIndex, animations);\n    quickSortHelper(array, startIndex, rightIndex - 1, animations);\n  }\n}\n  \nfunction swap(i, j, array) {\n  let temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n\n// read this for more details\n// https://www.geeksforgeeks.org/quick-sort/\n","export function heapSortAnimations(array) {\n  const animations = [];\n  buildMaxHeap(array, animations);\n  for (let endIndex = array.length - 1; endIndex >= 1; endIndex--) {\n    animations.push([0, endIndex, array[0], array[endIndex]]);\n    swap(0, endIndex, array);\n    siftDown(0, endIndex - 1, array, animations);\n  }\n  // return array;\n  return animations;\n}\nfunction buildMaxHeap(array, animations) {\n  const lastParentIndex = Math.floor((array.length - 1) / 2);\n  for (let i = lastParentIndex; i >= 0; i--) {\n    siftDown(i, array.length - 1, array, animations);\n  }\n}\nfunction siftDown(currentIndex, endIndex, heap, animations) {\n  let childOneIndex = currentIndex * 2 + 1;\n  while (childOneIndex <= endIndex) {\n    animations.push([childOneIndex, endIndex, -1, -1]);\n    animations.push([childOneIndex, endIndex, -1, -1]);\n    let childTwoIndex =\n      currentIndex * 2 + 2 <= endIndex ? currentIndex * 2 + 2 : -1;\n    let indexToSwap;\n    if (childTwoIndex !== -1 && heap[childTwoIndex] > heap[childOneIndex]) {\n      indexToSwap = childTwoIndex;\n    } else {\n      indexToSwap = childOneIndex;\n    }\n    if (heap[indexToSwap] > heap[currentIndex]) {\n      animations.push([\n        currentIndex,\n        indexToSwap,\n        heap[currentIndex],\n        heap[indexToSwap]\n      ]);\n      swap(currentIndex, indexToSwap, heap);\n      currentIndex = indexToSwap;\n      childOneIndex = currentIndex * 2 + 1;\n    } else {\n      return;\n    }\n  }\n}\n\nfunction swap(i, j, array) {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n","export function insertionSortAnimations(array) {\n  const animations = [];\n  for (let i = 1; i < array.length; i++) {\n    let j = i;\n    animations.push([j, j - 1, -1, -1]);\n    animations.push([j, j - 1, -1, -1]);\n    while (j > 0 && array[j] < array[j - 1]) {\n      animations.push([j, j - 1, array[j], array[j - 1]]);\n      swap(j, j - 1, array);\n      j -= 1;\n    }\n  }\n  // return array;\n  return animations;\n}\nfunction swap(i, j, array) {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport SortingVisualizer from \"./components/SortingVisualizer\";\nimport { getMergeSortAnimations } from \"./sortingAlgorithms/mergeSort\";\nimport { bubbleSortAnimations } from \"./sortingAlgorithms/bubbleSort\";\nimport { quickSortAnimations } from \"./sortingAlgorithms/quickSort\";\nimport { heapSortAnimations } from \"./sortingAlgorithms/heapSort\";\nimport { insertionSortAnimations } from \"./sortingAlgorithms/insertionSort\";\nimport \"./components/SortingVisualizer.css\";\n// let numberOfElementsInArray = 178;\n\nlet ANIMATION_SPEED_MS = 5;\nconst PRIMARY_COLOR = \"green\";\n\nconst SECONDARY_COLOR = \"red\";\n\nconst FINAL_COLOR = \"pink\";\nconst INITIAL_COLOR = \"turquoise\";\n\nexport class App extends Component {\n  state = {\n    array: []\n  };\n  speedAndBars = x => {\n    if (x === 1) {\n      this.genRandomArray(178, 1, true);\n    } else if (x === 2) {\n      this.genRandomArray(225, 2, true);\n    } else if (x === 3) {\n      this.genRandomArray(300, 3, true);\n    } else if (x === -1) {\n      this.genRandomArray(125, -1, true);\n    } else if (x === -2) {\n      this.genRandomArray(80, -2, true);\n    }\n  };\n  componentDidMount = () => {\n    this.genRandomArray(178, 1, false);\n  };\n\n  resetColor = () => {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = INITIAL_COLOR;\n    }\n  };\n  randomIntFromInterval = (min, max) =>\n    Math.floor(Math.random() * (max - min + 1) + min);\n  //sppedLog basically checks who is calling the functions- speed buttons or generateNew Array button\n  //**setState is an asynchronous function, so to get current array bars with class of array-bar we have used an async function*/\n  updateBarsState = width => {\n    // this.setState({ array: array });\n    let arrayBars = [];\n    async function something() {\n      const a = new Promise((res, rej) => {\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        res(arrayBars);\n      });\n      const newArrayBars = await a;\n      arrayBars = newArrayBars;\n      for (let k = 0; k < arrayBars.length; k++) {\n        arrayBars[k].style.width = `${width}px`;\n      }\n      // console.log(newArrayBars.length);\n      // console.log(arrayBars.length);\n    }\n    something();\n  };\n  genRandomArray = (numberOfArrayBars, number, speedLog) => {\n    if (number === 1) {\n      let array = [];\n      for (let i = 0; i < numberOfArrayBars; i++) {\n        array.push(this.randomIntFromInterval(10, 645));\n      }\n      document.querySelector(\".x\").style.backgroundColor = \"red\";\n      document.querySelector(\".xByFour\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xByTwo\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xMultiplyTwo\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xMultiplyFour\").style.backgroundColor = \"grey\";\n      ANIMATION_SPEED_MS = 5;\n      this.setState({ array: array });\n      //if we have called arrayBars with className 'array-bar', we wouldn't get the current clicked speed/bar button but the previous selection as setState is an asynchrnous so it doesn't update instantly, so we created seperate function for handling async function and get current state of the arrayBars\n      this.updateBarsState(6);\n    } else if (number === 2) {\n      let array = [];\n      for (let i = 0; i < numberOfArrayBars; i++) {\n        array.push(this.randomIntFromInterval(10, 645));\n      }\n      document.querySelector(\".x\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xByFour\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xByTwo\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xMultiplyTwo\").style.backgroundColor = \"red\";\n      document.querySelector(\".xMultiplyFour\").style.backgroundColor = \"grey\";\n      ANIMATION_SPEED_MS = 4;\n      this.setState({ array: array });\n      this.updateBarsState(4.3);\n    } else if (number === 3) {\n      let array = [];\n      for (let i = 0; i < numberOfArrayBars; i++) {\n        array.push(this.randomIntFromInterval(10, 645));\n      }\n      document.querySelector(\".x\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xByFour\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xByTwo\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xMultiplyTwo\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xMultiplyFour\").style.backgroundColor = \"red\";\n      ANIMATION_SPEED_MS = 2;\n      this.setState({ array: array });\n      this.updateBarsState(2.75);\n    } else if (number === -1) {\n      let array = [];\n      for (let i = 0; i < numberOfArrayBars; i++) {\n        array.push(this.randomIntFromInterval(10, 645));\n      }\n\n      document.querySelector(\".x\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xByFour\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xByTwo\").style.backgroundColor = \"red\";\n      document.querySelector(\".xMultiplyTwo\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xMultiplyFour\").style.backgroundColor = \"grey\";\n      ANIMATION_SPEED_MS = 8;\n      this.setState({ array: array });\n      this.updateBarsState(9.5);\n    } else if (number === -2) {\n      let array = [];\n      for (let i = 0; i < numberOfArrayBars; i++) {\n        array.push(this.randomIntFromInterval(10, 645));\n      }\n      document.querySelector(\".x\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xByFour\").style.backgroundColor = \"red\";\n      document.querySelector(\".xByTwo\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xMultiplyTwo\").style.backgroundColor = \"grey\";\n      document.querySelector(\".xMultiplyFour\").style.backgroundColor = \"grey\";\n      ANIMATION_SPEED_MS = 50;\n      this.setState({ array: array });\n      this.updateBarsState(16);\n    }\n    this.resetColor();\n  };\n  genReverseArray = numberOfArrayBars => {\n    let array = [];\n    for (let i = 0; i < numberOfArrayBars; i++) {\n      array.push(this.randomIntFromInterval(10, 645));\n    }\n    console.log(array);\n    array.sort((a, b) => b - a);\n    // let newArray = array.reverse();\n    console.log(array);\n\n    document.querySelector(\".x\").style.backgroundColor = \"red\";\n    document.querySelector(\".xByFour\").style.backgroundColor = \"grey\";\n    document.querySelector(\".xByTwo\").style.backgroundColor = \"grey\";\n    document.querySelector(\".xMultiplyTwo\").style.backgroundColor = \"grey\";\n    document.querySelector(\".xMultiplyFour\").style.backgroundColor = \"grey\";\n    ANIMATION_SPEED_MS = 5;\n    this.setState({ array: array });\n    this.updateBarsState(6);\n    this.resetColor();\n  };\n\n  // insertionSort() {\n  //   // const [animations1, animations2] = insertionSortAnimations(\n  //   //   this.state.array\n  //   // );\n  //   // console.log(animations1);\n  //   // console.log(animations2);\n  //   const animations = insertionSortAnimations(this.state.array);\n\n  //   // console.log(animations);\n  //   for (let i = 0; i < animations.length; i++) {\n  //     const arrayBars = document.getElementsByClassName(\"array-bar\");\n  //     const isColorChange = i % 3 !== 2;\n  //     if (isColorChange) {\n  //       const [barOneIdx, barTwoIdx] = animations[i];\n  //       const barOneStyle = arrayBars[barOneIdx].style;\n  //       const barTwoStyle = arrayBars[barTwoIdx].style;\n  //       const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n  //       setTimeout(() => {\n  //         barOneStyle.backgroundColor = color;\n  //         barTwoStyle.backgroundColor = color;\n  //       }, i * ANIMATION_SPEED_MS);\n  //     } else {\n  //       setTimeout(() => {\n  //         const [barOneIdx, newHeight] = animations[i];\n  //         const barOneStyle = arrayBars[barOneIdx].style;\n  //         barOneStyle.height = `${newHeight}px`;\n  //       }, i * ANIMATION_SPEED_MS);\n  //     }\n  //   }\n  // }\n  mergeSort = () => {\n    //disabling all buttons\n    const buttons = document.getElementsByClassName(\"btn\");\n    for (let k = 0; k < buttons.length; k++) {\n      buttons[k].disabled = true;\n    }\n    const animations = getMergeSortAnimations(this.state.array);\n    // console.log(this.state.array);\n    // console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      // console.log((i, animations[i]));\n\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          // console.log(barOneIdx, newHeight);\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          //below setTimeOut is for final color of the bars\n          // setTimeout(() => {\n          //   this.finalAnimation();\n          // }, animations.length * ANIMATION_SPEED_MS + 1);\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    //for final pink color of the array bars\n    const arrayBars1 = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < arrayBars1.length; i++) {\n      setTimeout(() => {\n        arrayBars1[i].style.backgroundColor = \"pink\";\n        //re-enabling all the buttons\n        for (let k = 0; k < buttons.length; k++) {\n          buttons[k].disabled = false;\n        }\n      }, ANIMATION_SPEED_MS * animations.length + 1 + i * 10);\n      //optional for resetting original color of bars\n      // setTimeout(() => {\n      //   arrayBars1[i].style.backgroundColor = INITIAL_COLOR;\n      // }, ANIMATION_SPEED_MS * animations.length + 1 + i * 12);\n    }\n  };\n\n  // finalAnimation() {\n  //   this.resetColor();\n  //   const sortedArrayBars = document.getElementsByClassName(\"array-bar\");\n  //   for (let k = 0; k < sortedArrayBars.length; k++) {\n  //     const newBarOneStyle = sortedArrayBars[k].style;\n  //     setTimeout(() => {\n  //       newBarOneStyle.backgroundColor = FINAL_COLOR;\n  //       // console.log(\"hello\", k);\n  //     }, k * ANIMATION_SPEED_MS);\n  //   }\n  // }\n\n  bubbleSort = () => {\n    //disabling all buttons\n    const buttons = document.getElementsByClassName(\"btn\");\n    for (let k = 0; k < buttons.length; k++) {\n      buttons[k].disabled = true;\n    }\n    const animations = bubbleSortAnimations(this.state.array);\n\n    // console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (animations[i] !== -1) {\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        // const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          // barOneStyle.backgroundColor = color;\n          // barTwoStyle.backgroundColor = color;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        //below setTimeOut is to persist the initial color of the bars while moving(to change color of comparing values and resetting them back) (last bar will remain PRIMARY_COLOR )\n        setTimeout(() => {\n          barOneStyle.backgroundColor = INITIAL_COLOR;\n          // barTwoStyle.backgroundColor = INITIAL_COLOR;\n        }, i * ANIMATION_SPEED_MS + 10);\n      } else {\n        //swapping the values\n        const [indexOne, indexTwo, barOneHeight, barTwoHeight] = animations[\n          i + 1\n        ];\n        const barOneStyle = arrayBars[indexOne].style;\n        const barTwoStyle = arrayBars[indexTwo].style;\n        setTimeout(() => {\n          barOneStyle.height = `${barTwoHeight}px`;\n          barTwoStyle.height = `${barOneHeight}px`;\n          // barTwoStyle.backgroundColor = FINAL_COLOR;\n        }, i * ANIMATION_SPEED_MS + 40);\n      }\n    }\n    //for final pink colors of the array bars\n    const arrayBarsNew = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < arrayBarsNew.length; i++) {\n      setTimeout(() => {\n        arrayBarsNew[i].style.backgroundColor = \"pink\";\n        //re-enabling all the buttons\n        for (let k = 0; k < buttons.length; k++) {\n          buttons[k].disabled = false;\n        }\n      }, ANIMATION_SPEED_MS * animations.length + 1 + i * 10);\n      //optional for resetting original color of the array bars\n      // setTimeout(() => {\n      //   arrayBarsNew[i].style.backgroundColor = INITIAL_COLOR;\n      // }, ANIMATION_SPEED_MS * animations.length + 1 + i * 20);\n    }\n  };\n\n  //color of pivot is to be done\n  quickSort = () => {\n    //disabling all buttons\n    const buttons = document.getElementsByClassName(\"btn\");\n    for (let k = 0; k < buttons.length; k++) {\n      buttons[k].disabled = true;\n    }\n    const animations = quickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (animations[i] === -2) {\n        //pivot or swapping\n        const [barOne, barTwo, barOneHeight, barTwoHeight] = animations[i + 1];\n        if (barTwoHeight === 0) {\n          //pivot\n          // let barOneStyle = arrayBars[barOne].style;\n          // x = barOne;\n          // // barOneStyle.backgroundColor = FINAL_COLOR;\n          // setInterval(() => {\n          //   barOneStyle.backgroundColor = FINAL_COLOR;\n          // }, i * ANIMATION_SPEED_MS + 15 * i);\n          // setTimeout(() => {\n          //   barOneStyle.backgroundColor = INITIAL_COLOR;\n          // }, i * ANIMATION_SPEED_MS + 10);\n          // continue;\n        } else {\n          //swapping\n          const barOneStyle = arrayBars[barOne].style;\n          const barTwoStyle = arrayBars[barTwo].style;\n          setTimeout(() => {\n            barOneStyle.height = `${barTwoHeight}px`;\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.height = `${barOneHeight}px`;\n            barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          }, i * ANIMATION_SPEED_MS + 10 * i);\n        }\n      } else {\n        //traversing\n        const [barOne, barTwo] = animations[i];\n        const barOneStyle = arrayBars[barOne].style;\n        const barTwoStyle = arrayBars[barTwo].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS + 10 * i);\n        //below setTimeOut is to persist the initial color of the bars while moving(to change color of comparing values and resetting them back) (last bar will remain PRIMARY_COLOR )\n        setTimeout(() => {\n          barOneStyle.backgroundColor = INITIAL_COLOR;\n          barTwoStyle.backgroundColor = INITIAL_COLOR;\n        }, i * ANIMATION_SPEED_MS + 50 + 10 * i);\n      }\n    }\n\n    //for final pink color of the bars\n    const arrayBarsNew = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < arrayBarsNew.length; i++) {\n      setTimeout(() => {\n        arrayBarsNew[i].style.backgroundColor = FINAL_COLOR;\n        //re-enabling all the buttons\n        for (let k = 0; k < buttons.length; k++) {\n          buttons[k].disabled = false;\n        }\n      }, animations.length * ANIMATION_SPEED_MS + 5 * i + 10 * animations.length);\n    }\n  };\n  heapSort = () => {\n    //disabling all buttons\n    const buttons = document.getElementsByClassName(\"btn\");\n    for (let k = 0; k < buttons.length; k++) {\n      buttons[k].disabled = true;\n    }\n    const animations = heapSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[\n        i\n      ];\n      const barOneStyle = arrayBars[barOneIndex].style;\n      const barTwoStyle = arrayBars[barTwoIndex].style;\n      if (barOneHeight < 0) {\n        //traversing\n        // const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          // barOneStyle.backgroundColor = color;\n          // barTwoStyle.backgroundColor = color;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        //below setTimeOut is to persist the initial color of the bars while moving(to change color of comparing values and resetting them back) (last bar will remain PRIMARY_COLOR )\n        setTimeout(() => {\n          barOneStyle.backgroundColor = INITIAL_COLOR;\n          barTwoStyle.backgroundColor = INITIAL_COLOR;\n        }, i * ANIMATION_SPEED_MS + 10);\n      } else {\n        //swapping\n        setTimeout(() => {\n          barOneStyle.height = `${barTwoHeight}px`;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.height = `${barOneHeight}px`;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          // barTwoStyle.backgroundColor = FINAL_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        //extra\n        setTimeout(() => {\n          barOneStyle.backgroundColor = INITIAL_COLOR;\n          barTwoStyle.backgroundColor = INITIAL_COLOR;\n        }, i * ANIMATION_SPEED_MS + 20);\n        if (barOneIndex === 0)\n          //for final color of last bar\n          setTimeout(() => {\n            // barOneStyle.backgroundColor = INITIAL_COLOR;\n            // barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            barTwoStyle.backgroundColor = FINAL_COLOR;\n          }, i * ANIMATION_SPEED_MS + 20);\n      }\n      // setTimeout(() => {\n      //   arrayBars[0].style.backgroundColor = FINAL_COLOR;\n      // }, i * ANIMATION_SPEED_MS + 1000);\n    }\n    //for final pink color of the bars\n    const arrayBarsNew = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < arrayBarsNew.length; i++) {\n      setTimeout(() => {\n        arrayBarsNew[i].style.backgroundColor = FINAL_COLOR;\n        //re-enabling all the buttons\n        for (let k = 0; k < buttons.length; k++) {\n          buttons[k].disabled = false;\n        }\n      }, animations.length * ANIMATION_SPEED_MS + ANIMATION_SPEED_MS * 10);\n    }\n\n    // console.log(animations);\n  };\n  insertionSort = () => {\n    //disabling all buttons\n    const buttons = document.getElementsByClassName(\"btn\");\n    for (let k = 0; k < buttons.length; k++) {\n      buttons[k].disabled = true;\n    }\n    const animations = insertionSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[\n        i\n      ];\n      const barOneStyle = arrayBars[barOneIndex].style;\n      const barTwoStyle = arrayBars[barTwoIndex].style;\n      if (barOneHeight < 0) {\n        // console.log(\"traversing\");\n        //traversing\n        // const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          // barOneStyle.backgroundColor = color;\n          // barTwoStyle.backgroundColor = color;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        //below setTimeOut is to persist the initial color of the bars while moving(to change color of comparing values and resetting them back) (last bar will remain PRIMARY_COLOR )\n        setTimeout(() => {\n          barOneStyle.backgroundColor = INITIAL_COLOR;\n          barTwoStyle.backgroundColor = INITIAL_COLOR;\n        }, i * ANIMATION_SPEED_MS + 10);\n      } else {\n        //swapping\n        // console.log(\"swapping\");\n        setTimeout(() => {\n          barOneStyle.height = `${barTwoHeight}px`;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.height = `${barOneHeight}px`;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          // barTwoStyle.backgroundColor = FINAL_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        //extra\n        setTimeout(() => {\n          barOneStyle.backgroundColor = INITIAL_COLOR;\n          barTwoStyle.backgroundColor = INITIAL_COLOR;\n        }, i * ANIMATION_SPEED_MS + 20);\n        if (barOneIndex === 0)\n          //for final color of last bar\n          setTimeout(() => {\n            // barOneStyle.backgroundColor = INITIAL_COLOR;\n            // barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            barTwoStyle.backgroundColor = FINAL_COLOR;\n          }, i * ANIMATION_SPEED_MS + 20);\n      }\n    }\n    // console.log(animations);\n    //for final pink color of the bars\n    const arrayBarsNew = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < arrayBarsNew.length; i++) {\n      setTimeout(() => {\n        arrayBarsNew[i].style.backgroundColor = FINAL_COLOR;\n        //re-enabling all the buttons\n        for (let k = 0; k < buttons.length; k++) {\n          buttons[k].disabled = false;\n        }\n      }, animations.length * ANIMATION_SPEED_MS + ANIMATION_SPEED_MS * 10);\n    }\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"navBar\">\n          <NavBar\n            genRandomArray={this.genRandomArray}\n            genReverseArray={this.genReverseArray}\n            mergeSort={this.mergeSort}\n            bubbleSort={this.bubbleSort}\n            quickSort={this.quickSort}\n            heapSort={this.heapSort}\n            insertionSort={this.insertionSort}\n            array={this.state.array}\n            speedAndBars={this.speedAndBars}\n          />\n        </div>\n        <div className=\"mainContent\">\n          <SortingVisualizer\n            array={this.state.array}\n            INITIAL_COLOR={this.INITIAL_COLOR}\n            // speedAndBars={this.speedAndBars}\n          />\n        </div>\n        <div>\n          <footer className=\"page-footer fixed-bottom font-small special-color-dark bg-dark  \">\n            <div className=\"footer-copyright text-center text-white\">\n              © 2020 Copyright:\n              <a href=\"https://anubhavcu.github.io/portfolio/\" target=\"blank\">\n                {\" \"}\n                <span className=\"badge badge-primary\"> Anubhav Srivastava</span>\n              </a>\n            </div>\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//alternative for quickSort animations\n// quickSort() {\n//   // let pivotIndex = 0;\n\n//   const animations = quickSortAnimations(this.state.array);\n//   console.log(animations);\n//   for (let i = 0; i < animations.length; i++) {\n//     const arrayBars = document.getElementsByClassName(\"array-bar\");\n//     // arrayBars[pivotIndex].style.backgroundColor = FINAL_COLOR;\n//     if (animations[i] !== -2) {\n//       const [barOne, barTwo] = animations[i];\n//       const barOneStyle = arrayBars[barOne].style;\n//       const barTwoStyle = arrayBars[barTwo].style;\n//       const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n//       setTimeout(() => {\n//         barOneStyle.backgroundColor = color;\n//         barTwoStyle.backgroundColor = color;\n//       }, i * ANIMATION_SPEED_MS + 10 * i);\n//       //below setTimeOut is to persist the initial color of the bars while moving(to change color of comparing values and resetting them back) (last bar will remain PRIMARY_COLOR )\n//       setTimeout(() => {\n//         barOneStyle.backgroundColor = INITIAL_COLOR;\n//         barTwoStyle.backgroundColor = INITIAL_COLOR;\n//       }, i * ANIMATION_SPEED_MS + 50 + 10 * i);\n//     } else {\n//       //either swap or pivot change\n\n//       const [barOne, barTwo, barOneHeight, barTwoHeight] = animations[i + 1];\n//       if (barTwoHeight !== 0) {\n//         //swap\n//         const barOneStyle = arrayBars[barOne].style;\n//         const barTwoStyle = arrayBars[barTwo].style;\n//         setTimeout(() => {\n//           barOneStyle.height = `${barTwoHeight}px`;\n//           barOneStyle.backgroundColor = PRIMARY_COLOR;\n//           barTwoStyle.height = `${barOneHeight}px`;\n//           // barTwoStyle.backgroundColor = FINAL_COLOR;\n//           barTwoStyle.backgroundColor = SECONDARY_COLOR;\n//         }, i * ANIMATION_SPEED_MS + 10 * i);\n//       } else {\n//         const barOneStyle = arrayBars[barOne].style;\n//         setTimeout(() => {\n//           barOneStyle.backgroundColor = FINAL_COLOR;\n//         }, i * ANIMATION_SPEED_MS + 10);\n//         continue;\n//         //pivot\n//         // pivotIndex = barOne;\n//         // arrayBars[barOne].style.backgroundColor = FINAL_COLOR;\n//         // setTimeout(() => {\n//         //   arrayBars[barOne].style.backgroundColor = FINAL_COLOR;\n//         // }, i * ANIMATION_SPEED_MS + 10);\n//       }\n//     }\n//   }\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport SortingVisualizer from \"./components/SortingVisualizer\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<SortingVisualizer />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}